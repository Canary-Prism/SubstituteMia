/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package substitutemia;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.JOptionPane;

import org.javacord.api.DiscordApi;
import org.javacord.api.DiscordApiBuilder;
import org.javacord.api.entity.intent.Intent;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONWriter;

import io.github.cdimascio.dotenv.Dotenv;

public class Bot {

    private DiscordApi api;
    private ArrayList<Meow> meows = new ArrayList<Meow>();

    private static String working_directory;

    private static volatile ArrayList<Long> COMMANDABLES = new ArrayList<>();
    private static volatile ArrayList<Long> BOREDS = new ArrayList<>();

    private static volatile long msg_channel_id = -1;

    public Bot() {
        api = new DiscordApiBuilder().setToken(Dotenv.configure().load().get("TOKEN")).addIntents(Intent.MESSAGE_CONTENT).login().join();
    }

    private int i = 0;
    private boolean success = false;

    public static void main(String[] args) {

        //here, we assign the name of the OS, according to Java, to a variable...
        String OS = (System.getProperty("os.name")).toUpperCase();
        if (OS.contains("WIN")) {
            working_directory = System.getenv("AppData");
        }
        else {
            //in either case, we would start in the user's home directory
            working_directory = System.getProperty("user.home");
            //if we are on a Mac, we are not done, we look for "Application Support"
            working_directory += "/Library/Application Support";
        }

        working_directory += "/SubstituteMia";
        //we are now free to set the working_directory to the subdirectory that is our 
        //folder.

        folder = new File(working_directory);
        save_file = new File(working_directory + "/save.json");

        loadSaves();

        var bot = new Bot();
        bot.start();
        new TerminalCommands("commands", bot).start();
        System.out.println("Bot started!");
    }

    private static File folder, save_file;

    private static String buffer = "";

    private static void loadSaves() {
        try {
            if (!folder.exists())
                folder.mkdirs(); //create the folder if it doesn't exist
            else {
                if (save_file.exists()) {
                    try {
                        buffer = "";
                        Files.readAllLines(save_file.toPath(), StandardCharsets.UTF_8).forEach((line) -> buffer += line);
                        JSONObject contents = new JSONObject(buffer);

                        contents.getJSONArray("commandables").forEach((id) -> {
                            COMMANDABLES.add((long) id);
                        });

                        contents.getJSONArray("boreds").forEach((id) -> {
                            BOREDS.add((long) id);
                        });

                        msg_channel_id = contents.getLong("msg_channel");

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                } else {
                    save_file.createNewFile();
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Cannot Access Save Data", "sadness", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
    }

    protected static void save() {
        try (FileWriter fw = new FileWriter(save_file)) {
            var writer = new JSONWriter(fw)
            .object()
                .key("commandables")
                .array();
            for (long l : COMMANDABLES) {
                writer
                    .value(l);
            }
            writer
                .endArray()
                .key("boreds")
                .array();
            for (long l : BOREDS) {
                writer
                    .value(l);
            }
            writer
                .endArray();

            writer
                .key("msg_channel")
                .value(msg_channel_id)
            .endObject();

            fw.close();

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Cannot Access Save Data", "sadness", JOptionPane.ERROR_MESSAGE);
            System.exit(-1);
        }
    }


    public void start() {
        api.addMessageCreateListener((e) -> {
            if (e.getMessageAuthor().isWebhook() || e.getMessageAuthor().isBotUser())
                return;
            var msg = e.getMessage();
            var text = msg.getContent();
            if (msg.getMentionedUsers().contains(api.getYourself()) && (msg.getAuthor().isBotOwner() || COMMANDABLES.contains(msg.getChannel().getId()))) {
                try {
                    if (text.contains("start meowing")) {

                        for (int i = 0; i < meows.size(); i++) {
                            if (meows.get(i).getChannel().equals(e.getChannel())) {
                                e.getChannel().sendMessage("i already the meowing here :3").join();
                                return;
                            }
                        }

                        i = text.indexOf("start meowing") + "start meowing".length() + 1;
                        var spliced_text = text.substring(i).split(" ");

                        int intervalmin = -1, intervalmax = -1, amount = -1;
                        boolean amount_is_time = true;
                        boolean amount_specified = false;

                        for (int k = 0; k < spliced_text.length; k++) {
                            try {
                                if (spliced_text[k].equalsIgnoreCase("every")) {
                                    k++;
                                    try {
                                        intervalmin = evaluateUnits(1, spliced_text[k]);
                                        if (spliced_text[k].equalsIgnoreCase("to")) {

                                            k++;
                                            try {
                                                intervalmax = evaluateUnits(1, spliced_text[k]);
                                            } catch (NumberFormatException exception) {
                                                intervalmax = Integer.parseInt(spliced_text[k]);
                                                                                            
                                                k++;
                                                intervalmax = evaluateUnits(intervalmax, spliced_text[k]);
                                            }
                                        }

                                    } catch (NumberFormatException exception) {
                                        intervalmin = Integer.parseInt(spliced_text[k]);

                                        k++;
                                        if (spliced_text[k].equalsIgnoreCase("to")) {
                                            intervalmax = Integer.parseInt(spliced_text[++k]);

                                            k++;
                                            intervalmin = evaluateUnits(intervalmin, spliced_text[k]);
                                            intervalmax = evaluateUnits(intervalmax, spliced_text[k]);
                                        } else {
                                            intervalmin = evaluateUnits(intervalmin, spliced_text[k]);
                                            k++;
                                            if (spliced_text[k].equalsIgnoreCase("to")) {
                                                intervalmax = Integer.parseInt(spliced_text[++k]);

                                                k++;
                                                intervalmax = evaluateUnits(intervalmax, spliced_text[k]);
                                            } else {
                                                intervalmax = intervalmin;
                                                k--;
                                            }
                                        }
                                    }


                                } else if (spliced_text[k].equalsIgnoreCase("for")) {
                                    amount = Integer.parseInt(spliced_text[++k]);
                                    amount_specified = true;

                                    k++;
                                    amount = evaluateUnits(amount, spliced_text[k]);
                                }
                            } catch (ArrayIndexOutOfBoundsException exception) {
                                if (intervalmax == -1) {
                                    intervalmax = intervalmin;
                                }
                            }
                        }
                        if (intervalmax < intervalmin) {
                            int temp = intervalmax;
                            intervalmax = intervalmin;
                            intervalmin = temp;
                        }
                        
                        if (amount_specified && ((intervalmin > amount && amount_is_time) || (amount < 1 && !amount_is_time))) {
                            e.getChannel().sendMessage("but.. then i won't get to meow at all.. :c").join();
                            return;
                        }
                        if (intervalmin == -1 || intervalmax == -1) {
                            throw new NumberFormatException("not sufficient arguments");
                        }

                        var meow = new Meow(e.getChannel(), intervalmin, intervalmax, amount, amount_is_time);
                        meows.add(meow);
                        
                        e.getChannel().sendMessage("okie i start meow here >:3").join();
                        meow.start();
                    } else if (text.contains("stop meowing everywhere")) {
                        meows.forEach((meow) -> {
                            meow.stop();
                        });
                        meows.clear();
                        e.getChannel().sendMessage("i stop meowing everywhere :c").join();
                    } else if (text.contains("stop meowing")) {
                        success = false;
                        for (int i = 0; i < meows.size(); i++) {
                            if (meows.get(i).getChannel().equals(e.getChannel())) {
                                meows.get(i).stop();
                                meows.remove(i);
                                success = true;
                                break;
                            }
                        }
                        if (success) {
                            e.getChannel().sendMessage("okie i stop :p").join();
                        } else {
                            e.getChannel().sendMessage("but.. i'm not meowing.. :c").join();
                        }
                    } else if (stringContainsMeow(text)) {
                        e.getChannel().sendMessage(Meow.meow()).join();
                    } else if (text.contains("i") && (text.contains("sorry") || text.contains("sowwy"))) {
                        e.getChannel().sendMessage("is okie :3\nNo be sowwyy").join();
                    } else {
                        e.getChannel().sendMessage("mrow?").join();
                    }
                } catch (NumberFormatException | ArrayIndexOutOfBoundsException exception) {
                    System.out.println(exception.getMessage());
                    e.getChannel().sendMessage("me no understandy :c").join();
                }
            } else if (BOREDS.contains(msg.getChannel().getId())) {
                if (text.contains("meow")) {
                    e.getChannel().sendMessage(Meow.meow()).join();
                } else if (text.contains("hehe")) {
                    e.getChannel().sendMessage("hehe >:3").join();
                } else if (text.contains("Mia") || text.contains("mia")) {
                    e.getChannel().sendMessage("mia? :3").join();
                } else if (text.contains("cat")) {
                    e.getChannel().sendMessage("<:catgirlhappypeek:1143286742934368286>").join();
                } else if (text.contains("sadness") || text.contains("sandess")) {
                    e.getChannel().sendMessage("sandess").join();
                }
            }
        });
    }

    private boolean stringContainsMeow(String text) {
        for (String s : Meow.meow_worbs) {
            if (text.contains(s)) {
                return true;
            }
        }
        return false;
    }

    private int evaluateUnits(int value, String unit) {
        if (unit.contains("sec")) {
            //nothing really
        } else if (unit.contains("min")) {
            value *= 60;
        } else if (unit.contains("hour") || unit.contains("hr")) {
            value *= 60 * 60;
        } else {
            throw new NumberFormatException("not a valid time unit");
        }
        return value;
    }

    private void sendMessage(String message, long channel_id) {
        try {
            api.getTextChannelById(channel_id).get().sendMessage(message).join();
        } catch (Exception e) {
            System.out.println("error sending message");
        }
    }

    private static class TerminalCommands implements Runnable {

        private Thread t;

        private String name;

        private Bot bot;

        private Scanner sc = new Scanner(System.in);

        public TerminalCommands(String name, Bot bot) {
            this.name = name;
            this.bot = bot;
        }

        @Override
        public void run() {
            var input = "";
            ArrayList<Long> target = null;
            Character operation = null;
            long value = -1;
            System.out.println("Command Listener Started\nCommands List:\n/commandables\n/boreds\n/save\n/msg");
            while (true) {
                target = null;
                operation = null;
                value = -1;
                input = sc.nextLine();
                try {
                    if (input.startsWith("/")) {
                        input = input.substring(1);
                        var args = input.split(" ");
                        if (args[0].equals("commandables")) {
                            target = COMMANDABLES;
                        } else if (args[0].equals("boreds")) {
                            target = BOREDS;
                        } else if (args[0].equals("save")) {
                            save();
                            System.out.println("saved");
                            continue;
                        } else if (args[0].equals("msg")) {
                            if (args[1].equals("setchannel")) {
                                msg_channel_id = Long.parseLong(args[2]);
                                System.out.println("channel set");
                                continue;
                            } else if (args[1].equals("getchannel")) {
                                if (msg_channel_id == -1) {
                                    System.out.println("no channel set");
                                } else {
                                    System.out.println("channel: " + msg_channel_id);
                                }
                                continue;
                            } else if (args[1].equals("send")) {
                                var message = "";
                                for (int i = 2; i < args.length; i++) {
                                    message += args[i] + " ";
                                }
                                bot.sendMessage(message, msg_channel_id);
                                System.out.println("message sent");
                                continue;
                            }
                        }
                        if (args[1].equals("add")) {
                            operation = 'a';
                            value = Long.parseLong(args[2]);
                        } else if (args[1].equals("remove")) {
                            operation = 'r';
                            value = Long.parseLong(args[2]);
                        } else if (args[1].equals("list")) {
                            operation = 'l';
                        }

                        if (target != null && operation != null) {
                            if (operation == 'a') {
                                if (target.contains(value)) {
                                    System.out.println("already in list");
                                } else {
                                    target.add(value);
                                    System.out.println("added");
                                }
                            } else if (operation == 'r') {
                                if (target.contains(value)) {
                                    target.remove(value);
                                    System.out.println("removed");
                                } else if (value < target.size() && value >= 0) {
                                    target.remove((int) value);
                                    System.out.println("removed");
                                } else {
                                    System.out.println("not in list");
                                }
                            } else if (operation == 'l') {
                                var index = 0;
                                for (long l : target) {
                                    System.out.println(index++ + ": " + l);
                                }
                            }
                        } else {
                            System.out.println("not a valid command");
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException exception) {
                    System.out.println("not sufficient arguments");
                } catch (NumberFormatException exception) {
                    System.out.println("not a number");
                }
            }
        }


        protected void start() {
            if (t == null) {
                t = new Thread(this, name);
                t.start();
            }
        }
    }
}
